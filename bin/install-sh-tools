#!/usr/bin/env bash

TOOLS="
    gotop
    pandoc
    trans
    emacs_lsp_booster
    lsp_proxy
    clangd
"

PREFIX_ROOT=$(realpath ${PREFIX_ROOT:-$HOME/.local})
SRC_DIR=$(realpath ${SRC_DIR:-$PREFIX_ROOT/src})
BIN_DIR=$(realpath ${BIN_DIR:-$PREFIX_ROOT/bin})
mkdir -p $SRC_DIR/ $BIN_DIR/

### core functions
function exists() {
    [[ -e $1 ]]
}

function lower() {
    if [[ $# -eq 0 ]]; then
        cat -
    else
        echo "$*"
    fi | tr "[:upper:]" "[:lower:]"
}

function is() {
    if [[ $1 -eq 0 ]]; then
        return 1
    else
        return 0
    fi
}

function os_type() {
    uname | lower
}

function cpu_type() {
    local _CPU_TYPE=$(uname -m | lower)
    if [[ $# -gt 1 ]] || ( [[ $# -eq 1 ]] && [[ $1 != "-a" ]] ); then
        return 1
    fi
    local alt=0
    if [[ $# -eq 1 ]]; then
        if [[ $1 = "-a" ]]; then
            local alt=1
        else
            return 1
        fi
    fi

    case $_CPU_TYPE in
        amd64 | x86_64)
            if is $alt; then
                echo "amd64"
            else
                echo "x86_64"
            fi
            ;;
        *)
            ;;
    esac
}

function main() {
    OS_TYPE=$(os_type)
    CPU_TYPE=$(cpu_type)
    for tool in $TOOLS; do
        cd $SRC_DIR
        if _$tool; then
            echo "'$tool' successfully installed."
        else
            echo "'$tool' installation failed."
        fi
    done
}

### tools
function _gotop() {
    local _CPU_TYPE=$(cpu_type -a)
    local pkg_name="gotop"
    local repository="https://github.com/xxxserxxx/$pkg_name"
    local version=$(curl -sL "$repository/releases/latest" | \
                        grep -Eo "tag/v[0-9\.]+" | \
                        uniq | \
                        cut -c 5-)
    local src_uri="$repository/releases/download/${version}/${pkg_name}_${version}_${OS_TYPE}_${_CPU_TYPE}.tgz"
    local pkg_dir=$(realpath "${SRC_DIR}/${pkg_name}-${version}")
    local pkg_bin=$pkg_dir/$pkg_name

    if exists $pkg_bin; then
        return
    fi

    rm -rf $SRC_DIR/${pkg_name}*
    mkdir -p $pkg_dir
    cd $pkg_dir
    curl -sL "$src_uri" | tar xz
    ln -sf $pkg_bin $BIN_DIR/$pkg_name
}

function _pandoc() {
    local _CPU_TYPE=$(cpu_type -a)
    local pkg_name="pandoc"
    local repository="https://github.com/jgm/pandoc"
    local version=$(curl -sL "$repository/releases/latest" | \
                        grep -Eo "tag/[0-9\.]+" | \
                        uniq | \
                        cut -c 5-)
    local src_uri="$repository/releases/download/${version}/pandoc-${version}-${OS_TYPE}-${_CPU_TYPE}.tar.gz"
    local pkg_dir=$(realpath "${SRC_DIR}/${pkg_name}-${version}")
    local pkg_bin=$pkg_dir/bin/$pkg_name

    if [[ $OS_TYPE != "linux" ]]; then
        echo "'${pkg_name}' only supports linux."
    fi
    if exists $pkg_bin; then
        return
    fi

    rm -rf $SRC_DIR/${pkg_name}*
    curl -sL "$src_uri" | tar xz
    cd $pkg_dir
    ln -sf $pkg_bin $BIN_DIR/$pkg_name
}

function _trans() {
    local pkg_name="translate-shell"
    local repository="https://github.com/soimort/$pkg_name"
    local src_uri="git.io/trans"
    local pkg_dir=$(realpath "${SRC_DIR}")
    local pkg_bin=$pkg_dir/trans

    if exists $pkg_bin || [[ $OS_TYPE != "linux" ]]; then
        return
    fi

    curl -sLO "$src_uri"
    chmod +x $pkg_bin
    ln -sf $pkg_bin $BIN_DIR/trans
}

function _emacs_lsp_booster() {
    local _CPU_TYPE=$(cpu_type)
    local pkg_name="emacs-lsp-booster"
    local repository="https://github.com/blahgeek/$pkg_name"
    local version=$(curl -sL "$repository/releases/latest" | \
                        grep -Eo "tag/v[0-9\.]+" | \
                        uniq | \
                        cut -c 5-)
    local src_uri="$repository/releases/download/${version}/${pkg_name}_${version}_${_CPU_TYPE}-unknown-${OS_TYPE}-musl.zip"
    local pkg_dir=$(realpath "${SRC_DIR}/${pkg_name}-${version}")
    local pkg_bin=$pkg_dir/$pkg_name

    if exists $pkg_bin; then
        return
    fi

    rm -rf $SRC_DIR/${pkg_name}*
    mkdir -p $pkg_dir
    cd $pkg_dir
    wget -q "$src_uri"
    unzip -q ${pkg_name}_${version}_${_CPU_TYPE}-unknown-${OS_TYPE}-musl.zip
    ln -sf $pkg_bin $BIN_DIR/$pkg_name
    rm -f ${pkg_name}_${version}_${_CPU_TYPE}-unknown-${OS_TYPE}-musl.zip
}

function _lsp_proxy() {
    local _CPU_TYPE=$(cpu_type)
    local pkg_name="lsp-proxy"
    local repository="https://github.com/jadestrong/$pkg_name"
    local version=$(curl -sL "$repository/releases/latest" | \
                        grep -Eo "tag/v[0-9\.]+" | \
                        uniq | \
                        cut -c 5-)
    local src_uri="$repository/releases/download/${version}/${pkg_name}-${OS_TYPE}.tar.gz"
    local pkg_dir=$(realpath "${SRC_DIR}/${pkg_name}-${version}")
    local pkg_bin=$pkg_dir/$pkg_name

    if exists $pkg_bin; then
        return
    fi

    rm -rf $SRC_DIR/${pkg_name}*
    mkdir -p $pkg_dir
    cd $pkg_dir
    curl -sL "$src_uri" | tar -xz
    ln -sf $pkg_bin $BIN_DIR/$pkg_name
}

function _clangd() {
    local pkg_name="clangd"
    local repository="https://github.com/clangd/$pkg_name"
    local version=$(curl -sL "$repository/releases/latest" \
                        | grep -Eo "tag/[0-9\.]+" \
                        | uniq \
                        | cut -c 5-)
    local src_uri="$repository/releases/download/${version}/${pkg_name}-linux-${version}.zip"
    local pkg_dir=$(realpath "${SRC_DIR}/${pkg_name}-${version}")
    local pkg_bin=$pkg_dir/$pkg_name

    if exists $pkg_bin; then
        return
    fi

    rm -rf $SRC_DIR/${pkg_name}*
    mkdir -p $pkg_dir
    cd $pkg_dir
    wget -q "$src_uri"
    unzip -q ${pkg_name}-linux-${version}.zip
    ln -sf $pkg_bin $BIN_DIR/$pkg_name
    rm -f ${pkg_name}-linux-${version}.zip
}

### run this script
main
