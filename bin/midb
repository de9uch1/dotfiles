#!/usr/bin/env python3

"""
Prints the Nth line of a file or of each of a list of files.
Default input stream is sys.stdin.

Usage:
   mid [-v] LINENO FILE1 [FILE2 FILE3 ...]
   cat FILE | mid LINENO

where LINENO is the 1-indexed line number to display (or a range: M-N).
If `-v` is present, it will print a UNIX `head`-style header above each
file, identifying its provenance.

Author: Matt Post <post@cs.jhu.edu>
Modifier: Hiroyuki Deguchi <deguchi.hiroyuki.db0@is.naist.jp>
"""

import argparse
import mmap
import sys
from io import BufferedReader


def smart_read(filename: str) -> BufferedReader:
    try:
        return open(filename, mode="r+b")
    except FileNotFoundError:
        print("Can't find file: {}".format(filename))
        sys.exit(1)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser("Grabs a line from one or more files")
    parser.add_argument(
        "--verbose",
        "-v",
        default=False,
        action="store_true",
        help="Display head-style file headers if there is more than one file",
    )
    parser.add_argument(
        "lines", help="The line number (N) or range (M-N or M:N) to display"
    )
    parser.add_argument(
        "file",
        type=smart_read,
        help="The files to work with",
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    if "-" in args.lines:
        start, stop = map(lambda x: int(x), args.lines.split("-"))
    elif "+" in args.lines:
        start, stop = map(lambda x: int(x), args.lines.split("+"))
        stop = start + stop
    else:
        start = int(args.lines)
        stop = int(args.lines)

    mmap_file = mmap.mmap(args.file.fileno(), 0)

    n = 0
    offset = 0
    for i, byte in enumerate(mmap_file):
        if byte == b"\n":
            n += 1
            if start <= n <= stop:
                print(mmap_file[offset:i].decode("utf-8").rstrip())
            offset = i + 1


def cli_main() -> None:
    args = parse_args()
    main(args)


if __name__ == "__main__":
    cli_main()
