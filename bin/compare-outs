#!/usr/bin/env python3
# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "rich",
# ]
# ///

import argparse
import os

from rich import box
from rich.console import Console
from rich.table import Table


def read_lines(path: str) -> list[str]:
    with open(path) as f:
        return [line.rstrip("\n") for line in f]


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("src", help="Source file.")
    parser.add_argument("hyps", nargs="+", help="Hypothesis files.")
    args = parser.parse_args()
    return args


def main(args):
    sources = read_lines(args.src)
    hypotheses: list[list[str]] = []
    for hyp_path in args.hyps:
        hypotheses.append(read_lines(hyp_path))

    console = Console(force_terminal=True)
    table = Table(
        show_header=True,
        header_style="bold magenta",
        show_lines=True,
        # box=box.MINIMAL_HEAVY_HEAD,
        box=box.HORIZONTALS,
    )
    table.add_column("L", width=4, justify="right")
    table.add_column(os.path.basename(args.src), overflow="fold")
    for i, hyp_path in enumerate(args.hyps):
        table.add_column(os.path.basename(hyp_path), overflow="fold")

    for i, (s, *hs) in enumerate(zip(sources, *hypotheses), start=1):
        table.add_row(f"[bold cyan]{i}[/]", s, *hs)

    console.print(table)


def cli_main():
    args = parse_args()
    main(args)


if __name__ == "__main__":
    cli_main()
